import { Request, Response } from 'express';
import { ValidationError, validationResult } from 'express-validator';
import { invalidRequest } from '@/api/utils/response';
import { ValidationErrors } from '@/api/utils/validation.d';

/**
 * Groups the errors by field.
 * @param errors The validation errors generated by the validation library.
 * @returns ValidationErrors.
 */
const groupErrors = (errors: Array<ValidationError>): ValidationErrors =>
    errors.reduce(
        (
            carry: ValidationErrors,
            current: ValidationError
        ): ValidationErrors => {
            const param: Array<string> = carry[current.param] || [];
            param.push(current.msg);
            return carry;
        },
        {}
    );

/**
 * Handles some logic to catch the validation result.
 * @param req The express request.
 * @param res The express response.
 * @returns True if validation passed, false if not.
 */
export const validate = (req: Request, res: Response) => {
    const errors: Array<ValidationError> = validationResult(req).array();
    if (errors.length > 0) {
        invalidRequest(res, groupErrors(errors));
        return false;
    }
    return true;
};
